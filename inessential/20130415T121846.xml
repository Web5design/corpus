<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  version="2.0"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>inessential.com</title>
    <link>http://inessential.com/</link>
    <description>Brent Simmons’s weblog.</description>
    <item>
      <title>With Nick Bradbury</title>
      <link>http://identicalcousins.net/2013/04/09/identical_cousins_14</link>
      <description>&lt;p&gt;Michael and I talk to Nick Bradbury in &lt;a href=&quot;http://identicalcousins.net/2013/04/09/identical_cousins_14&quot;&gt;Identical Cousins 14: Partners in Crime&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Tue, 09 Apr 2013 11:36:18 -0700</pubDate>
      <guid>http://inessential.com/2013/04/09/with_nick_bradbury</guid>
      <dc:date>2013-04-09T11:36:18-07:00</dc:date>
    </item>
    <item>
      <title>Join App.net</title>
      <link>http://inessential.com/2013/04/08/join_app_net</link>
      <description>&lt;p&gt;I have a whole bunch of invitations to App.net — &lt;a href=&quot;https://join.app.net/from/simmons&quot;&gt;you can sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t know much about App.net, check out the &lt;a href=&quot;http://blog.app.net&quot;&gt;weblog&lt;/a&gt;, where they promote third-party apps, link to their podcast, and talk about the APIs they’re building. It would be wrong to call it a Twitter alternative — it’s very much its own thing, and worth checking out.&lt;/p&gt;

&lt;p&gt;I’m a fan. Love the vibe. I’m &lt;a href=&quot;https://alpha.app.net/brentsimmons&quot;&gt;@brentsimmons&lt;/a&gt; there.&lt;/p&gt;</description>
      <pubDate>Mon, 08 Apr 2013 10:36:12 -0700</pubDate>
      <guid>http://inessential.com/2013/04/08/join_app_net</guid>
      <dc:date>2013-04-08T10:36:12-07:00</dc:date>
    </item>
    <item>
      <title>Debug Roundtable on iCloud Core Data Sync</title>
      <link>http://www.imore.com/debug-12-icloud-core-data-sync</link>
      <description>&lt;p&gt;I appeared on the &lt;a href=&quot;http://www.imore.com/debug-12-icloud-core-data-sync&quot;&gt;Debug podcast&lt;/a&gt; along with &lt;a href=&quot;http://blackpixel.com&quot;&gt;Daniel Pasco&lt;/a&gt; and &lt;a href=&quot;http://carpeaqua.com&quot;&gt;Justin Williams&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Fri, 05 Apr 2013 10:14:07 -0700</pubDate>
      <guid>http://inessential.com/2013/04/05/debug_roundtable_on_icloud_core_data_syn</guid>
      <dc:date>2013-04-05T10:14:07-07:00</dc:date>
    </item>
    <item>
      <title>Will Apple Be Whitelisted for CalDAV?</title>
      <link>http://inessential.com/2013/04/04/will_apple_be_whitelisted_for_caldav_</link>
      <description>&lt;p&gt;The &lt;a href=&quot;http://www.chromium.org/blink&quot;&gt;Blink fork of WebKit&lt;/a&gt; has me wondering about Apple’s and Google’s tactics.&lt;/p&gt;

&lt;p&gt;Specifically, I think back to Google’s &lt;a href=&quot;http://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html&quot;&gt;recent spring cleaning&lt;/a&gt;, where it said that the CalDAV API will be available for whitelisted developers only.&lt;/p&gt;

&lt;p&gt;I wonder if Apple will be on that whitelist.&lt;/p&gt;</description>
      <pubDate>Thu, 04 Apr 2013 16:53:43 -0700</pubDate>
      <guid>http://inessential.com/2013/04/04/will_apple_be_whitelisted_for_caldav_</guid>
      <dc:date>2013-04-04T16:53:43-07:00</dc:date>
    </item>
    <item>
      <title>Tom’s iCloud State of the Union</title>
      <link>http://www.atomicbird.com/blog/icloud-sotu</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.atomicbird.com/blog/icloud-sotu&quot;&gt;atomicbird&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Users hear about how great iCloud is and how apps can use it to sync their own data. They quite reasonably wonder why your app isn’t using it. Syncing data is a great idea, Apple gives you iCloud, why aren’t you using it, dammit? But if you did use it, the app would be so unreliable that users would (again, quite reasonably) complain that it was a &lt;em&gt;steaming pile of shit&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Wed, 03 Apr 2013 15:02:27 -0700</pubDate>
      <guid>http://inessential.com/2013/04/03/toms_icloud_state_of_the_union</guid>
      <dc:date>2013-04-03T15:02:27-07:00</dc:date>
    </item>
    <item>
      <title>Regressing</title>
      <link>https://medium.com/future-tech-future-market/7b1a7ddb6ffe</link>
      <description>&lt;p&gt;Ryan Holiday writes in &lt;a href=&quot;https://medium.com/future-tech-future-market/7b1a7ddb6ffe&quot;&gt;Our Regressive Web&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Google Alerts, Delicious and RSS were designed in blogging’s early days as innovations to help readers reduce this noise—to help improve their reading experience. But now those gains are disappearing. I feel that the tech press has allowed this to happen.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I had not realized that &lt;a href=&quot;http://venturebeat.com/2013/03/21/google-alerts-broken-useless-and-slowed-to-a-trickle/&quot;&gt;Google Alerts was having problems&lt;/a&gt;. But it doesn’t surprise me.&lt;/p&gt;

&lt;p&gt;I wonder if it will go away on the same day as Feedburner, or whether the two will succumb in separate clean-outs.&lt;/p&gt;</description>
      <pubDate>Tue, 02 Apr 2013 17:24:02 -0700</pubDate>
      <guid>http://inessential.com/2013/04/02/regressing</guid>
      <dc:date>2013-04-02T17:24:02-07:00</dc:date>
    </item>
    <item>
      <title>Identical Cousins 13</title>
      <link>http://identicalcousins.net/2013/04/02/identical_cousins_13</link>
      <description>&lt;p&gt;On &lt;a href=&quot;http://identicalcousins.net/2013/04/02/identical_cousins_13&quot;&gt;Identical Cousins 13&lt;/a&gt; we talk about Google Reader, iCloud, Microsoft, Dave Morin, and Summly and other things. It’s a grab bag.&lt;/p&gt;

&lt;p&gt;It’s also our best audio quality. We’re getting the hang of this.&lt;/p&gt;</description>
      <pubDate>Tue, 02 Apr 2013 11:38:20 -0700</pubDate>
      <guid>http://inessential.com/2013/04/02/identical_cousins_13</guid>
      <dc:date>2013-04-02T11:38:20-07:00</dc:date>
    </item>
    <item>
      <title>A Clarification Regarding Web Services and Control</title>
      <link>http://inessential.com/2013/03/28/a_clarification_regarding_web_services</link>
      <description>&lt;p&gt;Responding to &lt;a href=&quot;http://inessential.com/2013/03/27/why_developers_shouldnt_use_icloud_sy&quot;&gt;yesterday’s post&lt;/a&gt;, a number of people pointed out to me that it sounded weird if one minute I suggest checking out Azure &lt;a href=&quot;http://www.windowsazure.com/ios&quot;&gt;Mobile Services&lt;/a&gt; and the next minute tell developers they should take control of their app’s web services.&lt;/p&gt;

&lt;p&gt;I meant no contradiction, but I could have explained better.&lt;/p&gt;

&lt;p&gt;When creating web services, you should consider high-level systems, low-level systems, and everything in between, and figure out what makes sense for you.&lt;/p&gt;

&lt;p&gt;Here are some — not necessarily all — of the things to consider when choosing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Does it support iOS, Android, and browser-based apps? (Knowing that you may — may — want to move beyond just iOS.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can you create a social component?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can you add additional services — push notifications, feed-polling, sending email, whatever — to the system?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can you get aggregate data and learn how people use your app?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perhaps most importantly: is it possible to migrate to something else (even if takes some work)?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The answer is yes to all of these for Mobile Services. (While the answer is no to all of them for iCloud syncing.)&lt;/p&gt;

&lt;p&gt;The answer is also yes if you want to work at a low level — it’s yes if you get a virtual server on &lt;a href=&quot;http://www.linode.com&quot;&gt;Linode&lt;/a&gt; and run Ruby on Rails and MySQL.&lt;/p&gt;

&lt;p&gt;And it’s also yes if you work at a medium level and deploy apps using services like &lt;a href=&quot;http://www.heroku.com&quot;&gt;Heroku&lt;/a&gt;, &lt;a href=&quot;https://www.engineyard.com&quot;&gt;Engine Yard&lt;/a&gt;, &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon&lt;/a&gt;, and &lt;a href=&quot;https://developers.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At some point you have to outsource some things, right? You’re not going to build your own server machine that runs your own operating system in a data center you constructed with hammers and saws that you made.&lt;/p&gt;

&lt;p&gt;So you choose what makes sense. And if it can be a high-level system, that’s cool — it will probably save you time and be easier to maintain. But you might have good reasons to choose something medium or low level, and that’s cool too.&lt;/p&gt;

&lt;p&gt;The key is this: &lt;em&gt;you need control of the data&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;iCloud Core Data syncing is, once again, completely opaque and outside your control. It fits &lt;em&gt;none&lt;/em&gt; of the criteria listed above.&lt;/p&gt;</description>
      <pubDate>Thu, 28 Mar 2013 10:33:59 -0700</pubDate>
      <guid>http://inessential.com/2013/03/28/a_clarification_regarding_web_services</guid>
      <dc:date>2013-03-28T10:33:59-07:00</dc:date>
    </item>
    <item>
      <title>Why Developers Shouldn’t Use iCloud Syncing, Even If It Worked</title>
      <link>http://inessential.com/2013/03/27/why_developers_shouldnt_use_icloud_sy</link>
      <description>&lt;p&gt;Yesterday the Verge posted &lt;a href=&quot;http://www.theverge.com/2013/3/26/4148628/why-doesnt-icloud-just-work&quot;&gt;Apple’s broken promise: why doesn’t iCloud ‘just work’?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not the first article on the topic — &lt;a href=&quot;http://storify.com/Jury/the-trials-of-icloud&quot;&gt;bits&lt;/a&gt; &lt;a href=&quot;http://www.jumsoft.com/2013/01/response-to-sync-issues/&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;http://createlivelove.com/246&quot;&gt;pieces&lt;/a&gt; of this issue have come up before. But The Verge did an excellent job putting it all together. Good reporting.&lt;/p&gt;

&lt;p&gt;Here’s the thing: if you’re a developer, you shouldn’t use iCloud syncing anyway. I’ll explain.&lt;/p&gt;

&lt;h4&gt;Android and the web&lt;/h4&gt;

&lt;p&gt;You may think you’ll never want an Android or browser-based version of your app. But are you sure? Really, really sure?&lt;/p&gt;

&lt;p&gt;You hope your app will be a hit. (If not, then quit writing it and choose something else.) If it’s a hit on iOS, it could be a hit on Android too — and you can bet that customers will ask for a web app version.&lt;/p&gt;

&lt;p&gt;You don’t want to limit the success of your app just because you didn’t want to write your own server.&lt;/p&gt;

&lt;p&gt;And even if you’re sure that you’ll never want an Android or web version, is it possible you’d want a Mac version that isn’t sold on the App Store? (Only App Store builds are allowed to do iCloud syncing.)&lt;/p&gt;

&lt;h4&gt;Social software&lt;/h4&gt;

&lt;p&gt;We’ve been living in a social world for years. But iCloud syncing is not social: it’s per-user syncing.&lt;/p&gt;

&lt;p&gt;If you write your own server, you can write the social bits, so your users can share recipes, weather forecasts (look, Mom, it’s going to be sunny on Thursday!), favorite articles, or whatever-it-is your app does.&lt;/p&gt;

&lt;p&gt;People &lt;em&gt;expect&lt;/em&gt; social.&lt;/p&gt;

&lt;h4&gt;Additional services&lt;/h4&gt;

&lt;p&gt;If you’re writing an RSS reader, you can’t ask iCloud to download feeds.&lt;/p&gt;

&lt;p&gt;iCloud can’t poll Twitter to see if your follower count has gone up or down. iCloud can’t &lt;a href=&quot;http://forecast.io/&quot;&gt;generate weather forecasts&lt;/a&gt;. iCloud can’t &lt;a href=&quot;http://www.sailwx.info/&quot;&gt;track ships&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are all kinds of services that make sense on the server side. You could do some of them on a client, but at the expense of timeliness and battery life. If it’s a good idea, and you don’t do it on a server, your competition just has to write a server that does it, and your app is finished.&lt;/p&gt;

&lt;h4&gt;Learning how people use your app&lt;/h4&gt;

&lt;p&gt;You shouldn’t look at private data.&lt;/p&gt;

&lt;p&gt;With Glassboard we made the decision — there was no debate — to encrypt messages in the database, so that we couldn’t see private data.&lt;/p&gt;

&lt;p&gt;But we could still look at aggregate data. It was interesting to know how many boards were created each day, how often people used invitation codes, and so on.&lt;/p&gt;

&lt;p&gt;There’s no substitute for learning about how people use your app. You can &lt;em&gt;guess&lt;/em&gt; how people use your app. You can — and should — get all the feedback you can via email, Twitter, and App Store reviews.&lt;/p&gt;

&lt;p&gt;But seeing actual data makes a real difference, because it helps you figure out where your resources need to go.&lt;/p&gt;

&lt;h4&gt;Costs&lt;/h4&gt;

&lt;p&gt;It used to be expensive to develop, run, and maintain your own server. You’d buy a machine or a few machines, get them installed in a data center, figure out how Apache works, install MySQL, and write a ton of scripts. Perl or PHP scripts, most likely. (Ugh.)&lt;/p&gt;

&lt;p&gt;You’d use Subversion (if you were lucky) or cvs. You’d write your own testing system from scratch. You’d write a bash script that copied the files up to the server.&lt;/p&gt;

&lt;p&gt;And you’d spend a bunch of money.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Everything&lt;/em&gt; has gotten easier and cheaper. These days you’d run services on &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon&lt;/a&gt;, &lt;a href=&quot;http://www.windowsazure.com/en-us/&quot;&gt;Azure&lt;/a&gt;, &lt;a href=&quot;https://www.engineyard.com&quot;&gt;Engine Yard&lt;/a&gt;, or &lt;a href=&quot;http://www.heroku.com&quot;&gt;Heroku&lt;/a&gt;. Or get a virtual server on &lt;a href=&quot;http://www.linode.com&quot;&gt;Linode&lt;/a&gt;. You’d choose from one of the many excellent systems like &lt;a href=&quot;http://rubyonrails.org&quot;&gt;Ruby on Rails&lt;/a&gt;, &lt;a href=&quot;http://www.sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;, &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;, and &lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt;. You’d deploy via &lt;a href=&quot;http://git-scm.com&quot;&gt;git&lt;/a&gt; or &lt;a href=&quot;http://mercurial.selenic.com&quot;&gt;Mercurial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you can learn Cocoa, you can learn this stuff. (And so much of it is wonderful — you’ll &lt;em&gt;enjoy&lt;/em&gt; learning it.)&lt;/p&gt;

&lt;h4&gt;Control&lt;/h4&gt;

&lt;p&gt;Tim Wood, CTO of The Omni Group, tweeted the very wise words: &lt;a href=&quot;https://twitter.com/tjw/status/289230416064425984&quot;&gt;Own the Wheel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the thing: half the mobile revolution is about designing and building apps for smartphones and tablets.&lt;/p&gt;

&lt;p&gt;The other half is about writing the web services that power those apps.&lt;/p&gt;

&lt;p&gt;How comfortable are you with outsourcing half your app to another company? The answer should be: not at all comfortable.&lt;/p&gt;

&lt;p&gt;Do it yourself.&lt;/p&gt;</description>
      <pubDate>Wed, 27 Mar 2013 12:37:28 -0700</pubDate>
      <guid>http://inessential.com/2013/03/27/why_developers_shouldnt_use_icloud_sy</guid>
      <dc:date>2013-03-27T12:37:28-07:00</dc:date>
    </item>
    <item>
      <title>The Small Town Volunteer Fire Department</title>
      <link>http://adventuresinnewfield.blogspot.com/2013/03/aah-joys-oops-downers-of-living-in.html</link>
      <description>&lt;p&gt;My &lt;a href=&quot;http://adventuresinnewfield.blogspot.com/2013/03/aah-joys-oops-downers-of-living-in.html&quot;&gt;Mom has the scoop&lt;/a&gt; on goings-on in Newfield, a small town in south Jersey where my family comes from, where my Mom lives, where my grandfather was chief of the volunteer fire department.&lt;/p&gt;

&lt;p&gt;The city council wanted — for stupid reasons — to shut down the fire department, which had been serving the town for more than 100 years. The council voted to shut it down before changing its mind. Narrowly.&lt;/p&gt;

&lt;p&gt;Mom writes:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;All I can think about is that this mess marks the passing of the two important groups - those responsible for the original Borough bargain of lower taxes thru volunteerism and the Great Generation that Ever Was.  Political/social decision making has passed into the hands of the baby boomers and we are not prioritizing the welfare of the town, state, nation, world above our own petty egos. This is not the legacy past generations wanted us to embrace.&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Sun, 24 Mar 2013 14:30:06 -0700</pubDate>
      <guid>http://inessential.com/2013/03/24/the_small_town_volunteer_fire_department</guid>
      <dc:date>2013-03-24T14:30:06-07:00</dc:date>
    </item>
    <item>
      <title>NetNewsWire News from Black Pixel</title>
      <link>http://blackpixel.com/blog/2013/03/the-return-of-netnewswire.html</link>
      <description>&lt;p&gt;Black Pixel writes, in &lt;a href=&quot;http://blackpixel.com/blog/2013/03/the-return-of-netnewswire.html&quot;&gt;The Return of NetNewsWire&lt;/a&gt;, that future versions will have syncing, despite the end of Google Reader.&lt;/p&gt;

&lt;p&gt;Other points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;They’ve been working on new versions, including modern designs and new features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sync has been delayed because they were trying to get iCloud Core Data sync working, and it’s &lt;a href=&quot;http://storify.com/Jury/the-trials-of-icloud&quot;&gt;just too buggy&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <pubDate>Wed, 20 Mar 2013 14:48:11 -0700</pubDate>
      <guid>http://inessential.com/2013/03/20/netnewswire_news_from_black_pixel</guid>
      <dc:date>2013-03-20T14:48:11-07:00</dc:date>
    </item>
    <item>
      <title>Resolve App</title>
      <link>https://itunes.apple.com/us/app/resolve-app/id609722766?mt=8</link>
      <description>&lt;p&gt;I just bought &lt;a href=&quot;https://itunes.apple.com/us/app/resolve-app/id609722766?mt=8&quot;&gt;Resolve App&lt;/a&gt; by Dragon Forged Software. It’s an iPhone client for &lt;a href=&quot;https://lighthouseapp.com/&quot;&gt;Lighthouse&lt;/a&gt;, which I use.&lt;/p&gt;</description>
      <pubDate>Wed, 20 Mar 2013 11:23:49 -0700</pubDate>
      <guid>http://inessential.com/2013/03/20/resolve_app</guid>
      <dc:date>2013-03-20T11:23:49-07:00</dc:date>
    </item>
    <item>
      <title>My Favorite Way to Screw Up a Feed</title>
      <link>http://inessential.com/2013/03/18/my_favorite_way_to_screw_up_a_feed</link>
      <description>&lt;p&gt;Since Brian worked on the server side, his list of &lt;a href=&quot;http://inessential.com/2013/03/18/brians_stupid_feed_tricks&quot;&gt;Stupid Feed Tricks&lt;/a&gt; didn’t include my very favorite feed screw-up.&lt;/p&gt;

&lt;p&gt;A lot of hotels and similar offer wi-fi. When you open a page in your browser, it redirects you to their login page.&lt;/p&gt;

&lt;p&gt;Those systems don’t differentiate between an http request made by a feed reader and an http request made by a browser. (Nor should they.)&lt;/p&gt;

&lt;p&gt;But what happens is that you launch your reader and it gets a redirect for every single feed, to some kind of URL like &lt;code&gt;http://dumbhotel.com/register.aspx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Normally that would be fine. It’s just a redirect, and once you have actually logged in you can do a refresh in your reader and all’s well.&lt;/p&gt;

&lt;p&gt;But!&lt;/p&gt;

&lt;p&gt;No!&lt;/p&gt;

&lt;p&gt;A bunch of these dumb systems redirect using a &lt;em&gt;permanent&lt;/em&gt; redirect: they use &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;301 instead of 302&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When a feed reader gets a permanent redirect, it’s supposed to take that to mean: “Hey, the feed moved. It’s over here now. Save the new URL and use the new one from now on.”&lt;/p&gt;

&lt;p&gt;And if you don’t do that in your reader, and your feed reader is popular enough, smart people who quite rightly care about proper behavior will call you out. You &lt;em&gt;have&lt;/em&gt; to do that.&lt;/p&gt;

&lt;p&gt;So you write your feed reader to do the right thing — and then one of your customers goes to a dumb hotel, opens their laptop, and their subscription list is wiped out. Every feed URL is replaced with &lt;code&gt;http://dumbhotel.com/register.aspx&lt;/code&gt;. And now they can’t get their news, and they don’t know how to get it back.&lt;/p&gt;</description>
      <pubDate>Mon, 18 Mar 2013 17:56:35 -0700</pubDate>
      <guid>http://inessential.com/2013/03/18/my_favorite_way_to_screw_up_a_feed</guid>
      <dc:date>2013-03-18T17:56:35-07:00</dc:date>
    </item>
    <item>
      <title>Brian’s Stupid Feed Tricks</title>
      <link>http://inessential.com/2013/03/18/brians_stupid_feed_tricks</link>
      <description>&lt;p&gt;At NewsGator and Sepia Labs I worked with &lt;a href=&quot;https://twitter.com/brianreischl&quot;&gt;Brian Reischl&lt;/a&gt;, one of the server-side guys. Among other things, he worked on NewsGator’s RSS content service, which reads n million feeds once an hour.&lt;/p&gt;

&lt;p&gt;(I don’t know if I can say what n is. It surprised me when I heard it. The system is still running, by the way.)&lt;/p&gt;

&lt;p&gt;Brian is intimately acquainted with the different ways feeds can be screwed up. So he posted &lt;a href=&quot;https://docs.google.com/document/d/1cvq67iQpk2C7ufOsefsfKnGCXeUIv46NQHbnHkm8PtU/edit?usp=sharing&quot;&gt;Stupid Feed Tricks&lt;/a&gt; on Google Docs.&lt;/p&gt;

&lt;p&gt;I quote the entire thing below for people like me who don’t have Google accounts. The below is all by Brian:&lt;/p&gt;

&lt;h4&gt;Stupid HTTP Tricks&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;When the feed is gone/errored, publisher may still return a 200 OK but send an HTML page instead.&lt;/li&gt;
&lt;li&gt;Using permanent redirects for temporary errors. In one instance, all the Microsoft blogs had a temporary system error. All the feeds did a permanent redirect to the same system error page, and we updated all 40,000 feeds to point to that one URL. Whoops.&lt;/li&gt;
&lt;li&gt;Using very slow or overloaded servers. It might take 60 seconds just to connect and send the request, another 60 seconds to first response byte, and so on. This can bog down your content retrieval.&lt;/li&gt;
&lt;li&gt;Very slow responses, or responses that never actually complete (ie, you hang trying to read data essentially forever)&lt;/li&gt;
&lt;li&gt;Infinitely long responses. eg, feed server has an error and prints an error message in a infinite loop until something stops it. Hopefully it’s stopped by a check in your system, rather than consuming all the memory on your server.&lt;/li&gt;
&lt;li&gt;Sending back things that are not XML (eg, videos). It can help to check Content-Type and Content-Length headers, but sometimes they misidentify RSS as something else (eg, text/plain).&lt;/li&gt;
&lt;li&gt;Returning an HTML page containing HTML/Javascript redirects instead of using HTTP redirects.&lt;/li&gt;
&lt;li&gt;Infinite redirect loops.&lt;/li&gt;
&lt;li&gt;Long (but non-infinite) chains of redirects.&lt;/li&gt;
&lt;li&gt;Responding with 304 Not Modified if you send any If-None-Match/If-Modified-Since header, even if the feed has changed.&lt;/li&gt;
&lt;li&gt;Throttling your IP address. Some don’t tell you they’re throttling. Some provide Retry-After headers, but the HTTP status code can vary. eg, Twitter used to use their cutesy “420 Enhance Your Calm” response, then switched to “500 Internal Server Error”. Some use “503 Unavailable”. You’re mostly covered if you look for Retry-After headers in every non-success response..&lt;/li&gt;
&lt;li&gt;Redirecting (perhaps permanently) to a URL that’s already in your system. So now you either have a duplicate feed, or you have to update clients somehow. Note this can sometimes be legitimate, eg consolidating multiple feeds into one.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Stupid XML Tricks&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Any sort of XML well-formedness error you can think of. Missing closing tags, mismatched tags, bad escaping, not quoting attributes, missing root elements.&lt;/li&gt;
&lt;li&gt;Including unescaped HTML content inside a tag - which sort of works, except that most HTML isn’t XML-compliant.&lt;/li&gt;
&lt;li&gt;Putting in characters that are illegal in XML documents (eg, some non-printable characters that should be escaped, but aren’t)&lt;/li&gt;
&lt;li&gt;Declaring the document as ISO-8859-1 encoding, but actually using UTF-8, with some Arabic characters in it.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Stupid RSS/Atom Tricks&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Missing any element you can think of.&lt;/li&gt;
&lt;li&gt;Adding custom elements without namespaces.&lt;/li&gt;
&lt;li&gt;Using common extension elements without defining the namespaces (eg, using the common “mrss” namespace prefix for MediaRSS elements, without actually specifying that namespace anywhere)&lt;/li&gt;
&lt;li&gt;Not providing a GUID.&lt;/li&gt;
&lt;li&gt;Providing the same GUID for every post in the feed (eg, using the feed URL as the GUID)&lt;/li&gt;
&lt;li&gt;Providing the same GUID for every post, but changing each time you request the feed (eg, using the current date/time)&lt;/li&gt;
&lt;li&gt;Using a different GUID for each post, changing each time you request the feed (eg, generating an actual GUID each time the feed is requested)&lt;/li&gt;
&lt;li&gt;Not giving a PubDate&lt;/li&gt;
&lt;li&gt;Changing the PubDate on every retrieval.&lt;/li&gt;
&lt;li&gt;Changing the PubDate when a post is edited, rather than using a lastUpdated tag.&lt;/li&gt;
&lt;li&gt;Putting a tiny number of posts in the feed (sometimes just one). These types then usually publish 10 articles in the space of two minutes, and wonder why you’re missing 9 of them.&lt;/li&gt;
&lt;li&gt;Putting only one post in the feed, with a GUID that never changes. When there are new posts, just the title and description change. (I believe this was a bunch of Japanese newspaper sites.)&lt;/li&gt;
&lt;li&gt;Updating post content without changing the lastUpdated date (or not having one)&lt;/li&gt;
&lt;li&gt;Updating post metadata (eg, enclosures, MediaRSS extensions, etc) with or without changing the lastUpdated date.&lt;/li&gt;
&lt;li&gt;Treating their feed as append-only, so over time the feed grows without bound. eg, each request might pull back 10,000 posts covering the entire 8 year history of the feed.&lt;/li&gt;
&lt;li&gt;Specifying dates in whatever their language’s “Date.ToString()” spits out. eg, “Tuesday, March 31st, Year Of Our Lord Two Thousand And Twelve, 4:59 PM”&lt;/li&gt;
&lt;li&gt;Not specifying timezones for dates (very common. It’s easy to just assume UTC, but note that can yield pubdates in the future).&lt;/li&gt;
&lt;li&gt;Specifying dates that are far in the past or future (anything up to thousands of years)&lt;/li&gt;
&lt;li&gt;Having the Link element point to another site. This is actually pretty common (eg, DaringFireball). This can be a problem depending on how you’re identifying individual posts, or if you’re trying to detect duplicates across feeds.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Other Stupid Tricks&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Updating posts very frequently. Newspapers are very fond of this. In 4 hours they might change a post 12 times, by the end it might have nothing in common with the original article (completely different title, completely different body). Sometimes combined with not using lastUpdated, or just not changing lastUpdate.&lt;/li&gt;
&lt;li&gt;Publishing updated posts as new posts, so you have 12 versions of the same post in the feed.&lt;/li&gt;
&lt;li&gt;Occasionally giving you an two-week-old version of the feed for one or two requests. It looked like one server in a cluster had cached an old version and wasn’t updating it. (This was the New York Times back in ~2009. They might’ve fixed it by now.)&lt;/li&gt;
&lt;li&gt;Adding posts very quickly. This is very common with feeds like the StockTwits stream, Twitter feeds (when that was allowed), the “all news” feeds from news organizations, etc. If you only check the feed every 60 minutes, you could easily miss something.&lt;/li&gt;
&lt;li&gt;Changing content literally every time you get the feed. eg, a feed that returns the current time in all the timezones, or the current weather for 20 different cities.&lt;/li&gt;
&lt;li&gt;Putting out private data without requiring authorization of any sort. eg, a feed of all your GMail. This isn’t a problem until you provide search or other feed discoverability, and then people’s private data starts showing up. Then they get very angry.&lt;/li&gt;
&lt;li&gt;Some places will publish a feed and then get angry that you use it, especially if you have ads in your reader. (name redacted before I get sued) got &lt;em&gt;very&lt;/em&gt; bent out of shape over that back in ~2007.&lt;/li&gt;
&lt;li&gt;Providing feeds, but then also using robots.txt to say you can’t crawl it. So now do you violate the robots.txt, or not let your users subscribe to feeds because the publisher is a dipshit?&lt;/li&gt;
&lt;li&gt;Providing valid, but limited interest feeds. eg, search feeds (couches for sale in Portland on Craigslist!). Also lots of custom things like combinations from Yahoo Pipes (or whatever equivalent people come up with), bookmark/favorite feeds, etc. Can lead to lots of duplicate (or near duplicate) posts, and lots of feed retrievals that very few people care about.&lt;/li&gt;
&lt;li&gt;Publishers will routinely have 2-4 copies of the exact same feed. eg, one sourced from their site, and another republished through FeedBurner. Note: FeedBurner includes extension elements that tell you what the source feed and post were.&lt;/li&gt;
&lt;li&gt;Including malicious Javascript or HTML inside of the content in hopes of hacking your system. There was a test suite for this, unfortunately I don’t have the URL handy just now.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Random Notes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;You should think hard about canonicalization of URLs. Some parts of the URL can be case-sensitive (path and query) other parts can’t (protocol, host and post). Users (and webmasters) will absolutely use different upper/lower casing in different places.&lt;/li&gt;
&lt;li&gt;If you build a database index on FeedUrl, consider that 99% of them start with “http://”, which makes for a shitty index. Consider separating the protocol into its own column, and then indexing on the remainder of the URL. Alternatively, you could index on a hashed value of the URL. Theoretically you could have collisions, but in practice there are not that many feeds.&lt;/li&gt;
&lt;/ol&gt;</description>
      <pubDate>Mon, 18 Mar 2013 14:25:00 -0700</pubDate>
      <guid>http://inessential.com/2013/03/18/brians_stupid_feed_tricks</guid>
      <dc:date>2013-03-18T14:25:00-07:00</dc:date>
    </item>
    <item>
      <title>RSS-Sync Mailing List</title>
      <link>http://inessential.com/2013/03/17/rss-sync_mailing_list</link>
      <description>&lt;p&gt;I created a new mailing list for people who want to &lt;a href=&quot;http://lists.ranchero.com/listinfo.cgi/rss-sync-ranchero.com&quot;&gt;talk about the technical side of RSS syncing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ideally there would be a single standard for RSS syncing, and clients could choose among systems. But I don’t insist on that — at least not yet. I think it’s ambitious enough just to get some working sync systems up and running.&lt;/p&gt;</description>
      <pubDate>Sun, 17 Mar 2013 12:35:15 -0700</pubDate>
      <guid>http://inessential.com/2013/03/17/rss-sync_mailing_list</guid>
      <dc:date>2013-03-17T12:35:15-07:00</dc:date>
    </item>
    <item>
      <title>What Else Google Is Shutting Down</title>
      <link>http://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html</link>
      <description>&lt;p&gt;While the demise of Google Reader got all the attention, there are some other things going away in &lt;a href=&quot;http://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html&quot;&gt;A second spring of cleaning&lt;/a&gt;. It’s worth reading.&lt;/p&gt;

&lt;p&gt;One of the interesting ones: the CalDAV API will be removed for all but whitelisted developers. &lt;a href=&quot;http://en.wikipedia.org/wiki/CalDAV&quot;&gt;CalDAV&lt;/a&gt; builds on WebDAV and is an open standard. Instead you’d have to use the &lt;a href=&quot;https://developers.google.com/google-apps/calendar/&quot;&gt;Google Calendar API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wouldn’t have noticed this except that I was out with two calendar developers last night: John Chaffee of &lt;a href=&quot;http://www.busymac.com/busycal/&quot;&gt;BusyCal&lt;/a&gt; and Michael Simmons of &lt;a href=&quot;http://flexibits.com&quot;&gt;Flexibits&lt;/a&gt;. I suspect they’ve got some coding to do.&lt;/p&gt;

&lt;p&gt;Google certainly has the right to shut things down — and I think they’re right to do so, also. The company’s been all over the place and should continue to work on focus.&lt;/p&gt;

&lt;p&gt;But I don’t like when they turn off existing support for an open standard like CalDAV in favor of a Google-only API. Sure, they can — it’s within their rights, obviously. But I don’t like it.&lt;/p&gt;</description>
      <pubDate>Fri, 15 Mar 2013 15:25:08 -0700</pubDate>
      <guid>http://inessential.com/2013/03/15/what_else_google_is_shutting_down</guid>
      <dc:date>2013-03-15T15:25:08-07:00</dc:date>
    </item>
    <item>
      <title>Dave’s Notes for New RSS Readers</title>
      <link>http://threads2.scripting.com/2013/march/theIdealRssReader</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://threads2.scripting.com/2013/march/theIdealRssReader&quot;&gt;Dave Winer&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The main thing we &lt;a href=&quot;http://scripting.com/stories/2010/09/18/rebootingRssTwoKeyPoints.html&quot;&gt;learned&lt;/a&gt; is that subscription needs to be centralized to make the process as simple as possible for the user. That’s one of the main reasons Twitter was such an effective competitor.&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Fri, 15 Mar 2013 14:04:14 -0700</pubDate>
      <guid>http://inessential.com/2013/03/15/daves_notes_for_new_rss_readers</guid>
      <dc:date>2013-03-15T14:04:14-07:00</dc:date>
    </item>
    <item>
      <title>Google Reader API Documentation</title>
      <link>http://inessential.com/2013/03/14/google_reader_api_documentation</link>
      <description>&lt;p&gt;There isn’t really any such thing as Google Reader API documentation.&lt;/p&gt;

&lt;p&gt;But I do have a PDF document that Nick Bradbury wrote up when we were switching FeedDemon and NetNewsWire from NewsGator syncing to Google Reader.&lt;/p&gt;

&lt;p&gt;It’s from 2009. Parts of it are surely out-of-date (authentication, for sure), and it was written with the expectation that the reader is familiar with NewsGator syncing.&lt;/p&gt;

&lt;p&gt;Nevertheless, in the spirit of Marco’s &lt;a href=&quot;http://www.marco.org/2013/03/14/baby-steps-replacing-google-reader&quot;&gt;baby steps toward replacing Google Reader&lt;/a&gt;, I present it (with Nick’s permission) in case it’s useful to anyone:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ranchero.com/downloads/GoogleReaderAPI-2009.pdf&quot;&gt;GoogleReaderAPI-2009.pdf&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 14 Mar 2013 16:04:58 -0700</pubDate>
      <guid>http://inessential.com/2013/03/14/google_reader_api_documentation</guid>
      <dc:date>2013-03-14T16:04:58-07:00</dc:date>
    </item>
    <item>
      <title>RSS Readers Other than Google Reader Are Under-Reported in Your Logs</title>
      <link>http://inessential.com/2013/03/14/rss_readers_other_than_google_reader_are</link>
      <description>&lt;p&gt;Here’s something website owners should realize:&lt;/p&gt;

&lt;p&gt;You might look at your logs and find that Google Reader reports 100,000 subscribers. (For instance.)&lt;/p&gt;

&lt;p&gt;And then you look and find that clients apps X, Y, and Z don’t seem to hit your feed all that often.&lt;/p&gt;

&lt;p&gt;The easy conclusion is that Google Reader has thousands more users than X, Y, and Z. But that wouldn’t necessarily be correct.&lt;/p&gt;

&lt;h4&gt;Here’s Why&lt;/h4&gt;

&lt;p&gt;If X uses Google Reader for syncing, then X doesn’t read your feed directly. It gets it from Google Reader, and that person is reported to you under the Google Reader subscription count.&lt;/p&gt;

&lt;p&gt;So it’s possible that half — or whatever — of those Google Reader subscribers are using X. (Or Y or Z.)&lt;/p&gt;

&lt;p&gt;Or not. Or more than half.&lt;/p&gt;

&lt;p&gt;You just have no way of knowing. But it’s a safe bet that more people are using client apps than your logs report.&lt;/p&gt;</description>
      <pubDate>Thu, 14 Mar 2013 15:50:44 -0700</pubDate>
      <guid>http://inessential.com/2013/03/14/rss_readers_other_than_google_reader_are</guid>
      <dc:date>2013-03-14T15:50:44-07:00</dc:date>
    </item>
    <item>
      <title>Why I love RSS and You Do Too</title>
      <link>http://inessential.com/2013/03/14/why_i_love_rss_and_you_do_too</link>
      <description>&lt;p&gt;Even if you don’t use an RSS reader, you still use RSS.&lt;/p&gt;

&lt;p&gt;If you subscribe to any podcasts, you use RSS. Flipboard and Twitter are RSS readers, even if it’s not obvious and they do other things besides.&lt;/p&gt;

&lt;p&gt;Lots of apps on the various app stores use RSS in at least some way. They just don’t tell you — because why should they?&lt;/p&gt;

&lt;p&gt;RSS is used for mundane things too, like &lt;a href=&quot;http://sparkle.andymatuschak.org&quot;&gt;Mac app updates&lt;/a&gt; (for non-App-Store apps) and Xcode documentation.&lt;/p&gt;

&lt;p&gt;And those people you follow on Twitter who post interesting links? They often get those links from their RSS reader.&lt;/p&gt;

&lt;p&gt;One way or another, directly or indirectly, you use RSS. Without RSS all we’d have is pictures of cats and breakfast.&lt;/p&gt;

&lt;h4&gt;Boring&lt;/h4&gt;

&lt;p&gt;RSS is plumbing. It’s used all over the place but you don’t notice it. Which is cool.&lt;/p&gt;

&lt;p&gt;But here’s why it’s great plumbing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are many millions of feeds, from the smallest blog to the many feeds at the New York Times. Just about everything that gets published on the web is available via RSS. (Outside of Twitter and Facebook.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are no user caps. No company can tell your favorite app how many users it can have. (Twitter does this.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nobody can tell you how to display an article from an RSS feed. (Twitter does this with tweets.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The formats are stable. Code I wrote five years ago to parse feeds would work today and will work in five years. (The formats are simple, too.) Other services have APIs that change and break existing apps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RSS can’t be shut down. Any number of companies can go out of business, but nobody can stop anybody from publishing and reading RSS feeds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nobody can force ads on you. A given RSS reader could add ads, but you can switch — because another RSS reader can read the same feeds. A given publisher could put ads in their own feeds, but you can unsubscribe. There is no company that can force ads on everyone, as Twitter and Facebook are working on for their systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nobody can force you to be tracked. If you’re not using a syncing system, then nobody knows what you subscribe to and what you read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don’t need to register anywhere to write an RSS app. (You do need to register to write Facebook and Twitter apps.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the general case there are no security issues with feed reading. (Unless you’re using a sync service or reading authenticated feeds.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is elegance. It derives from the design of the internet and the web and its many open standards — designed so that no entity can control it, so that it survives stupidity and greed when it appears.&lt;/p&gt;

&lt;p&gt;Lots of things work like this. Not just RSS.&lt;/p&gt;

&lt;h4&gt;Capitalism&lt;/h4&gt;

&lt;p&gt;A naive reading of the above makes it sound like RSS is anti-business. That’s not true at all. (I did well with my RSS business.)&lt;/p&gt;

&lt;p&gt;Instead, it’s anti-monopolist. By design it creates a level playing field. Anybody can write RSS apps, and anybody can use RSS however they want to.&lt;/p&gt;

&lt;p&gt;This means that competition and innovation are permitted to thrive.&lt;/p&gt;

&lt;p&gt;But it’s not a guarantee. In the past several years it seems to have slowed way down.&lt;/p&gt;

&lt;h4&gt;Prague 1948 Forever&lt;/h4&gt;

&lt;p&gt;When Eastern Europe opened up, following the fall of the Berlin Wall and the collapse of the Soviet Union, Prague looked like it had been sealed up in a bubble since 1948.&lt;/p&gt;

&lt;p&gt;Google Reader isn’t communist Russia, obviously, duh — but it’s a similar pattern. There was one gigantic player and a bunch of satellites, and RSS readers more-or-less looked like it was still 2006.&lt;/p&gt;

&lt;p&gt;Not that there wasn’t any innovation — there was some — but it’s been pretty quiet, especially compared to the several years before 2006.&lt;/p&gt;

&lt;p&gt;RSS the format has remained as useful and cool as ever, but RSS readers haven’t done so well.&lt;/p&gt;

&lt;p&gt;My hope — my expectation, even — is that a few things will turn this around:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The end of Google Reader takes away that one dominant player. The market for RSS readers is no longer frozen — and it will interest more developers than it has in recent years.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Over-reach by Twitter and its diminishing user experience makes people interested in other ways of finding good stuff to read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The lower costs of server-side development and deployment brings creating RSS services within reach of smaller companies.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The challenge — as ever, with everything — is to make useful and delightful apps that people love.&lt;/p&gt;

&lt;p&gt;But now, if I’m right, we’ll have more people working on that challenge.&lt;/p&gt;

&lt;p&gt;In the meantime, the loss of Google Reader syncing is going to be tough. That’s a big hurdle. &lt;a href=&quot;http://www.marco.org/2013/03/14/baby-steps-replacing-google-reader&quot;&gt;Marco proposes some baby steps&lt;/a&gt;. I don’t like Google Reader’s (undocumented) API, but I like the pragmatic approach.&lt;/p&gt;

&lt;h4&gt;Well&lt;/h4&gt;

&lt;p&gt;At any rate — these are interesting times! I know that’s a curse, but I take it as a blessing, because it’s way more fun that way.&lt;/p&gt;</description>
      <pubDate>Thu, 14 Mar 2013 14:56:59 -0700</pubDate>
      <guid>http://inessential.com/2013/03/14/why_i_love_rss_and_you_do_too</guid>
      <dc:date>2013-03-14T14:56:59-07:00</dc:date>
    </item>
  </channel>
</rss>
